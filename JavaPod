import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Player {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        
        int thrust = 100;
        boolean BoostNow = false;
        boolean DidBoost = false;
        
        
    //Checkpoint Location Init
        int checksAmount = 0;
        int[] checksX = new int[4];
        int[] checksY = new int[4];
        boolean firstPass = true;
        boolean DoneMapping = false;
        
        

        // game loop        //{}
        while (true) {
            int x = in.nextInt();
            int y = in.nextInt();
            int nextCheckpointX = in.nextInt(); // x position of the next check point
            int nextCheckpointY = in.nextInt(); // y position of the next check point
            int nextCheckpointDist = in.nextInt(); // distance to the next checkpoint
            int nextCheckpointAngle = in.nextInt(); // angle between your pod orientation and the direction of the next checkpoint
            int opponentX = in.nextInt();
            int opponentY = in.nextInt();
            
            
            
            
        // Checkpoint location code
            
            if(firstPass){
                checksX[checksAmount] = nextCheckpointX;
                checksY[checksAmount] = nextCheckpointY;
                
                firstPass = false;
                
                //checksAmount += 1; // gonna 
            }
            
            
                //               and         current Checks[] isn't nextCheckpoint
            if( !DoneMapping    &&      checksX[checksAmount] != nextCheckpointX    &&  checksY[checksAmount] != nextCheckpointX )
            {
                
                //  checkAmount isn't 0    if check(0,0) is nextCheck 
                if( checksAmount != 0    &&  checksX[0] == nextCheckpointX   &&  checksY[0] == nextCheckpointY )
                {
                    DoneMapping = true;
                }
                else{
                
                    checksAmount ++; //will stop at the highest value in the array
                    
                    checksX[checksAmount] = nextCheckpointX;
                    checksY[checksAmount] = nextCheckpointY;
                }
            }
            
            
            for (int i = 0; i <4; i++)
            {
                System.err.println( "checksX " + i + " ,checksY " + i + ": " + checksX[i] + "," + checksY[i] );
            }
            System.err.println( "nextCheckpointX: " + " nextCheckpointY: " + nextCheckpointX + ","+ nextCheckpointY );
            System.err.println( "checksAmount: " + checksAmount);
            
            
            
            
            
            
            
            
            
       // Driving Code     
            
            thrust = 100 - Math.abs( nextCheckpointAngle );
            
            /**if ( Math.abs(nextCheckpointAngle) > 90 ){
                thrust = 0;
            }
            else{
                thrust = 100;
            }**/
            
            
            //if (){}
            if (nextCheckpointDist < 400)
            {
                thrust -= 60;
            }
            else if (nextCheckpointDist < 2000)
            {
                thrust -= 30;
            }
            
            
            
            
            if(thrust < 0)
            {
                thrust  = 0;   
            }else if (thrust > 100)
            {
                thrust  = 100;
            }
            
            
            
            thrust = Math.round(thrust);
            //System.err.println(thrust);
            
            
            
            
            //System.err.println( in.nextInt() );
            //System.err.println(thrust);
            //System.err.println(thrust);
            //*/
            
            
            // Write an action using System.out.println()
            // To debug: System.err.println("Debug messages...");
            
            
            // You have to output the target position
            // followed by the power (0 <= thrust <= 100)
            // i.e.: "x y thrust"
            
            if(BoostNow && !DidBoost){
                DidBoost = true;
                System.out.println(nextCheckpointX + " " + nextCheckpointY + " BOOST" );
            }
            else
            {
                System.out.println(nextCheckpointX + " " + nextCheckpointY + " " + thrust );
            }
            
            //private static void cat(){}
            
            
            
        }
    }
}
